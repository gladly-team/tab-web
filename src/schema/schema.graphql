"""Global app fields"""
type App implements Node {
  """The ID of an object"""
  id: ID!
  moneyRaised: Float
  dollarsPerDayRate: Float
  referralVcReward: Int

  """All the widgets"""
  widgets(after: String, first: Int, before: String, last: Int): WidgetConnection

  """One of the charities"""
  charity(charityId: String!): Charity

  """All the charities"""
  charities(after: String, first: Int, before: String, last: Int, filters: CharitiesFilters): CharityConnection

  """All the background Images"""
  backgroundImages(after: String, first: Int, before: String, last: Int): BackgroundImageConnection
  isGlobalCampaignLive: Boolean

  """Campaigns (or "charity spotlights") shown to users."""
  campaign: Campaign
}

"""A background image"""
type BackgroundImage implements Node {
  """The ID of an object"""
  id: ID!

  """the background image name"""
  name: String

  """The image filename"""
  image: String

  """The image file URL"""
  imageURL: String

  """The image thumbnail filename"""
  thumbnail: String

  """The image thumbnail URL"""
  thumbnailURL: String

  """ISO datetime string of when the background image was last set"""
  timestamp: String
}

"""A connection to a list of items."""
type BackgroundImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BackgroundImageEdge]
}

"""An edge in a connection."""
type BackgroundImageEdge {
  """The item at the end of the edge"""
  node: BackgroundImage

  """A cursor for use in pagination"""
  cursor: String!
}

"""Campaigns (or "charity spotlights") shown to users."""
type Campaign {
  """the ID of the campaign"""
  campaignId: String

  """whether or not the campaign should currently show to users"""
  isLive: Boolean!

  """the number of new users who joined during this campaign"""
  numNewUsers: Int
}

"""Fields on which to filter the list of charities."""
input CharitiesFilters {
  isPermanentPartner: Boolean
}

"""A charitable charity"""
type Charity implements Node {
  """The ID of an object"""
  id: ID!

  """the charity name"""
  name: String

  """the charity category"""
  category: String

  """the charity website"""
  website: String

  """the charity description"""
  description: String

  """the charity impact message"""
  impact: String

  """the charity logo image URI"""
  logo: String

  """the charity post-donation image URI"""
  image: String

  """An optional caption for the post-donation image"""
  imageCaption: String

  """The number of VC the charity has received in a given time period."""
  vcReceived(startTime: String, endTime: String): Int
}

"""A connection to a list of items."""
type CharityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CharityEdge]
}

"""An edge in a connection."""
type CharityEdge {
  """The item at the end of the edge"""
  node: Charity

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateNewUserInput {
  userId: String!
  email: String
  referralData: ReferralData
  experimentGroups: ExperimentGroups
  extensionInstallId: String
  extensionInstallTimeApprox: String
  clientMutationId: String
}

type CreateNewUserPayload {
  user: User
  clientMutationId: String
}

"""For expected errors, such as during form validation"""
type CustomError {
  """The error code"""
  code: String

  """The error message"""
  message: String
}

input DonateVcInput {
  userId: String!
  charityId: String!
  vc: Int!
  clientMutationId: String
}

type DonateVcPayload {
  user: User
  errors: [CustomError]
  clientMutationId: String
}

"""An object representing a single revenue value"""
input EncodedRevenueValue {
  encodingType: EncodedRevenueValueTypeEnum!

  """
  A string that we can decode to a revenue value (float) using the "encodingType" method
  """
  encodedValue: String!
  adSize: String
}

"""
The type of transformation we should use to resolve the object into a revenue value
"""
enum EncodedRevenueValueTypeEnum {
  AMAZON_CPM
}

"""Action taken in response to the "referral notification" experiment."""
enum ExperimentActionReferralNotification {
  NONE
  DISMISS
  CLICK
}

"""The actions a user may take in an experiment"""
input ExperimentActions {
  searchIntro: ExperimentActionSearchIntro
  referralNotification: ExperimentActionReferralNotification
}

"""Action taken in response to the "search intro" experiment."""
enum ExperimentActionSearchIntro {
  NONE
  DISMISS
  CLICK
}

"""The actions a user has taken in an experiment"""
type ExperimentActionsOutput {
  searchIntro: ExperimentActionSearchIntro
  referralNotification: ExperimentActionReferralNotification
}

"""The test of showing an explanation of why there are ads"""
enum ExperimentGroupAdExplanation {
  NONE
  DEFAULT
  SHOW_EXPLANATION
}

"""The test of allowing anonymous user authentication"""
enum ExperimentGroupAnonSignIn {
  NONE
  AUTHED_USER_ONLY
  ANONYMOUS_ALLOWED
}

"""The test of showing only one ad to new users"""
enum ExperimentGroupOneAdForNewUsers {
  NONE
  DEFAULT
  ONE_AD_AT_FIRST
}

"""The test of showing a notification to ask users to recruit friends"""
enum ExperimentGroupReferralNotification {
  NONE
  NO_NOTIFICATION
  COPY_A
  COPY_B
  COPY_C
  COPY_D
  COPY_E
}

"""The experimental groups to which the user is assigned"""
input ExperimentGroups {
  anonSignIn: ExperimentGroupAnonSignIn
  variousAdSizes: ExperimentGroupVariousAdSizes
  thirdAd: ExperimentGroupThirdAd
  oneAdForNewUsers: ExperimentGroupOneAdForNewUsers
  adExplanation: ExperimentGroupAdExplanation
  searchIntro: ExperimentGroupSearchIntro
  referralNotification: ExperimentGroupReferralNotification
}

"""The test of showing an introduction message to Search for a Cause"""
enum ExperimentGroupSearchIntro {
  NONE
  NO_INTRO
  INTRO_A
  INTRO_HOMEPAGE
}

"""The test of enabling a third ad"""
enum ExperimentGroupThirdAd {
  NONE
  TWO_ADS
  THREE_ADS
}

"""The test of enabling many different ad sizes"""
enum ExperimentGroupVariousAdSizes {
  NONE
  STANDARD
  VARIOUS
}

input LogEmailVerifiedMutationInput {
  userId: String!
  clientMutationId: String
}

type LogEmailVerifiedMutationPayload {
  user: User
  clientMutationId: String
}

input LogReferralLinkClickInput {
  userId: String!
  clientMutationId: String
}

type LogReferralLinkClickPayload {
  success: Boolean!
  clientMutationId: String
}

input LogSearchInput {
  userId: String!
  source: String
  clientMutationId: String
}

type LogSearchPayload {
  user: User
  clientMutationId: String
}

input LogTabInput {
  userId: String!
  tabId: String
  clientMutationId: String
}

type LogTabPayload {
  user: User
  clientMutationId: String
}

input LogUserDataConsentInput {
  userId: String!
  consentString: String!
  isGlobalConsent: Boolean!
  clientMutationId: String
}

type LogUserDataConsentPayload {
  success: Boolean!
  clientMutationId: String
}

input LogUserExperimentActionsInput {
  userId: String!
  experimentActions: ExperimentActions
  clientMutationId: String
}

type LogUserExperimentActionsPayload {
  user: User
  clientMutationId: String
}

enum LogUserRevenueAggregationOperationEnum {
  MAX
}

input LogUserRevenueInput {
  userId: String!
  revenue: Float

  """A revenue value encoded because it is not available on the client side"""
  encodedRevenue: EncodedRevenueValue
  aggregationOperation: LogUserRevenueAggregationOperationEnum
  dfpAdvertiserId: String
  adUnitCode: String
  tabId: String
  adSize: String
  clientMutationId: String
}

type LogUserRevenuePayload {
  success: Boolean!
  clientMutationId: String
}

"""Info about the user's day of most searches"""
type MaxSearchesDay {
  """The day (datetime)the most searches occurred"""
  date: String

  """The number of searches made on that day"""
  numSearches: Int
}

"""Info about the user's day of most opened tabs"""
type MaxTabsDay {
  """The day the most tabs were opened"""
  date: String

  """The number of tabs opened on that day"""
  numTabs: Int
}

input MergeIntoExistingUserInput {
  userId: String!
  clientMutationId: String
}

type MergeIntoExistingUserPayload {
  success: Boolean!
  clientMutationId: String
}

type Mutation {
  logTab(input: LogTabInput!): LogTabPayload
  logSearch(input: LogSearchInput!): LogSearchPayload
  logUserRevenue(input: LogUserRevenueInput!): LogUserRevenuePayload
  logUserDataConsent(input: LogUserDataConsentInput!): LogUserDataConsentPayload
  donateVc(input: DonateVcInput!): DonateVcPayload
  mergeIntoExistingUser(input: MergeIntoExistingUserInput!): MergeIntoExistingUserPayload
  logEmailVerified(input: LogEmailVerifiedMutationInput!): LogEmailVerifiedMutationPayload
  logReferralLinkClick(input: LogReferralLinkClickInput!): LogReferralLinkClickPayload
  setUserBkgImage(input: SetUserBkgImageInput!): SetUserBkgImagePayload
  setUserBkgColor(input: SetUserBkgColorInput!): SetUserBkgColorPayload
  setUserBkgCustomImage(input: SetUserBkgCustomImageInput!): SetUserBkgCustomImagePayload
  setUserBkgDailyImage(input: SetUserBkgDailyImageInput!): SetUserBkgDailyImagePayload
  updateWidgetData(input: UpdateWidgetDataInput!): UpdateWidgetDataPayload
  updateWidgetVisibility(input: UpdateWidgetVisibilityInput!): UpdateWidgetVisibilityPayload
  updateWidgetEnabled(input: UpdateWidgetEnabledInput!): UpdateWidgetEnabledPayload
  updateWidgetConfig(input: UpdateWidgetConfigInput!): UpdateWidgetConfigPayload
  setUserActiveWidget(input: SetUserActiveWidgetInput!): SetUserActiveWidgetPayload
  createNewUser(input: CreateNewUserInput!): CreateNewUserPayload
  setUsername(input: SetUsernameInput!): SetUsernamePayload
  updateUserExperimentGroups(input: UpdateUserExperimentGroupsInput!): UpdateUserExperimentGroupsPayload
  logUserExperimentActions(input: LogUserExperimentActionsInput!): LogUserExperimentActionsPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  app: App
  user(userId: String!): User
}

input ReferralData {
  referringUser: String
  referringChannel: String
}

"""Info about any rate-limiting for VC earned from search queries"""
type SearchRateLimit {
  """
  Whether we are currently rate-limiting the user's VC earned from searches
  """
  limitReached: Boolean
  reason: SearchRateLimitReason

  """Whether we should present the user with a CAPTCHA"""
  checkIfHuman: Boolean
}

"""Why we are rate-limiting the user's VC earned from searches"""
enum SearchRateLimitReason {
  NONE
  ONE_MINUTE_MAX
  FIVE_MINUTE_MAX
  DAILY_MAX
}

input SetUserActiveWidgetInput {
  userId: String!
  widgetId: String!
  clientMutationId: String
}

type SetUserActiveWidgetPayload {
  user: User
  clientMutationId: String
}

input SetUserBkgColorInput {
  userId: String!
  color: String!
  clientMutationId: String
}

type SetUserBkgColorPayload {
  user: User
  clientMutationId: String
}

input SetUserBkgCustomImageInput {
  userId: String!
  image: String!
  clientMutationId: String
}

type SetUserBkgCustomImagePayload {
  user: User
  clientMutationId: String
}

input SetUserBkgDailyImageInput {
  userId: String!
  clientMutationId: String
}

type SetUserBkgDailyImagePayload {
  user: User
  clientMutationId: String
}

input SetUserBkgImageInput {
  userId: String!
  imageId: String!
  clientMutationId: String
}

type SetUserBkgImagePayload {
  user: User
  clientMutationId: String
}

input SetUsernameInput {
  userId: String!
  username: String!
  clientMutationId: String
}

type SetUsernamePayload {
  user: User
  errors: [CustomError]
  clientMutationId: String
}

input UpdateUserExperimentGroupsInput {
  userId: String!
  experimentGroups: ExperimentGroups
  clientMutationId: String
}

type UpdateUserExperimentGroupsPayload {
  user: User
  clientMutationId: String
}

input UpdateWidgetConfigInput {
  userId: String!
  widgetId: String!
  config: String!
  clientMutationId: String
}

type UpdateWidgetConfigPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetDataInput {
  userId: String!
  widgetId: String!
  data: String!
  clientMutationId: String
}

type UpdateWidgetDataPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetEnabledInput {
  userId: String!
  widgetId: String!
  enabled: Boolean!
  clientMutationId: String
}

type UpdateWidgetEnabledPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetVisibilityInput {
  userId: String!
  widgetId: String!
  visible: Boolean!
  clientMutationId: String
}

type UpdateWidgetVisibilityPayload {
  widget: Widget
  clientMutationId: String
}

"""A person who uses our app"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """Users's username"""
  userId: String

  """Users's background image"""
  backgroundImage: BackgroundImage

  """Users's username"""
  username: String

  """User's email"""
  email: String

  """ISO datetime string of when the user joined"""
  joined: String
  justCreated: Boolean

  """User's current VC"""
  vcCurrent: Int

  """User's all time VC"""
  vcAllTime: Int

  """User's all time tab count"""
  tabs: Int

  """User's tab count for today"""
  tabsToday: Int

  """Info about the user's day of most opened tabs"""
  maxTabsDay: MaxTabsDay

  """User's vc"""
  level: Int

  """Remaing hearts until next level."""
  heartsUntilNextLevel: Int

  """User's total vc donated"""
  vcDonatedAllTime: Int

  """People recruited by this user"""
  recruits(after: String, first: Int, before: String, last: Int, startTime: String, endTime: String): UserRecruitsConnection

  """The number of users this user has recruited"""
  numUsersRecruited: Int

  """User widgets"""
  widgets(after: String, first: Int, before: String, last: Int, enabled: Boolean): WidgetConnection

  """User's active widget id"""
  activeWidget: String

  """User's background option"""
  backgroundOption: String

  """User's background custom image"""
  customImage: String

  """User's background color"""
  backgroundColor: String

  """
  Whether this user was created by an existing user and then merged into the existing user
  """
  mergedIntoExistingUser: Boolean

  """User's all time search count"""
  searches: Int

  """User's search count for today"""
  searchesToday: Int

  """Info about any search query rate-limiting"""
  searchRateLimit: SearchRateLimit

  """Info about the user's day of most searches"""
  maxSearchesDay: MaxSearchesDay

  """Actions the user has taken during experiments"""
  experimentActions: ExperimentActionsOutput
}

"""Info about a user recruited by a referring user"""
type UserRecruits {
  """The ID of an object"""
  id: ID!

  """ISO datetime string of when the recruited user joined"""
  recruitedAt: String
}

"""A connection to a list of items."""
type UserRecruitsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserRecruitsEdge]

  """The count of users recruited (signed up)"""
  totalRecruits: Int

  """The count of users recruited who remained active for one day or more"""
  recruitsActiveForAtLeastOneDay: Int

  """The count of users recruited who have opened one tab or more"""
  recruitsWithAtLeastOneTab: Int
}

"""An edge in a connection."""
type UserRecruitsEdge {
  """The item at the end of the edge"""
  node: UserRecruits

  """A cursor for use in pagination"""
  cursor: String!
}

"""App widget"""
type Widget implements Node {
  """The ID of an object"""
  id: ID!

  """Widget display name"""
  name: String

  """Widget type"""
  type: String

  """Widget icon"""
  icon: String

  """The Widget enabled state"""
  enabled: Boolean

  """The Widget visible state"""
  visible: Boolean

  """Widget data."""
  data: String

  """Widget user specific configuration."""
  config: String

  """Widget general configuration."""
  settings: String
}

"""A connection to a list of items."""
type WidgetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WidgetEdge]
}

"""An edge in a connection."""
type WidgetEdge {
  """The item at the end of the edge"""
  node: Widget

  """A cursor for use in pagination"""
  cursor: String!
}
